{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating Projectile Motion: Dependence of Range on Launch Angle Projectile motion, the movement of an object thrown at an angle to the horizontal, is a fundamental concept in physics. Understanding how the range of a projectile depends on the launch angle is not only mathematically intriguing but also has numerous real-world applications. This principle is widely used in various fields, from analyzing the flight of a soccer ball to calculating the trajectory of a spacecraft. 1. Theoretical Foundation I see you're asking about deriving the equations for projectile motion, specifically the range equation \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) , as shown in the image. Let's go through the derivation step by step using the given equations of motion. We'll assume you're looking to derive the range \\( R \\) , since that's the final equation highlighted, but if you'd like to derive another part (like the time of flight), let me know! Step 1: Understand the Setup Projectile motion describes an object launched at an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) to the horizontal, under the influence of gravity \\( g \\) (with no air resistance). The motion can be broken into two independent components: - Horizontal motion (x-direction): Constant velocity, since there's no horizontal acceleration. - Vertical motion (y-direction): Accelerated motion due to gravity. The given equations are: - Horizontal position: \\( x = v_0 \\cos \\theta \\cdot t \\) - Vertical position: \\( y = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\) - Time of flight: \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) (when \\( y = 0 \\) , i.e., when the projectile returns to the ground) - Range: \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) Our goal is to derive the range \\( R \\) . Step 2: Derive the Time of Flight First, we need the total time the projectile is in the air (time of flight). The projectile returns to the ground when its vertical position \\( y = 0 \\) . Use the vertical position equation: [ y = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 ] Set \\( y = 0 \\) (when the projectile lands): [ 0 = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 ] Factor out \\( t \\) : [ t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0 ] This gives two solutions: - \\( t = 0 \\) (the launch point) - \\( v_0 \\sin \\theta - \\frac{1}{2} g t = 0 \\) Solve the second equation: [ v_0 \\sin \\theta - \\frac{1}{2} g t = 0 ] [ \\frac{1}{2} g t = v_0 \\sin \\theta ] [ t = \\frac{v_0 \\sin \\theta}{\\frac{1}{2} g} = \\frac{2 v_0 \\sin \\theta}{g} ] This matches the given time of flight: [ t = \\frac{2 v_0 \\sin \\theta}{g} ] This is the total time the projectile is in the air. Step 3: Derive the Range \\( R \\) The range \\( R \\) is the horizontal distance traveled when the projectile lands, i.e., the value of \\( x \\) when \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) . Use the horizontal position equation: [ x = v_0 \\cos \\theta \\cdot t ] Substitute the time of flight \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) : [ R = x = v_0 \\cos \\theta \\cdot \\left( \\frac{2 v_0 \\sin \\theta}{g} \\right) ] Simplify: [ R = \\frac{v_0 \\cdot 2 v_0 \\sin \\theta \\cos \\theta}{g} = \\frac{2 v_0^2 \\sin \\theta \\cos \\theta}{g} ] Now, use the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin \\theta \\cos \\theta \\) : [ 2 \\sin \\theta \\cos \\theta = \\sin(2\\theta) ] Substitute this into the equation: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This matches the given range equation: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] Step 4: Verify the Result The derived equation shows that the range depends on: - The square of the initial velocity ( \\( v_0^2 \\) ), - The sine of twice the launch angle ( \\( \\sin(2\\theta) \\) ), - The gravitational acceleration ( \\( g \\) ). This makes physical sense: - A higher initial velocity increases the range (since \\( v_0^2 \\) ). - The \\( \\sin(2\\theta) \\) term indicates that the range is maximized when \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) , which is a well-known result in projectile motion. - A larger \\( g \\) (e.g., on a planet with stronger gravity) reduces the range. Final Answer The range of the projectile is: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This was derived by: 1. Finding the time of flight by setting the vertical position to zero. 2. Substituting the time of flight into the horizontal position equation. 3. Simplifying using the trigonometric identity \\( 2 \\sin \\theta \\cos \\theta = \\sin(2\\theta) \\) . If you'd like to derive any other part of the projectile motion equations (e.g., maximum height) or need a numerical example, let me know! 2. Range Analysis Based on Launch Angle Key observations: Maximum range occurs at $ \\theta = 45^\\circ $ (assuming no air resistance). Symmetry of trajectory: The same range is achieved at complementary angles (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) result in the same range). Dependence on velocity: Since \\(R\\propto v_0^2\\) , doubling the initial velocity quadruples the range. Effect of gravity: On planets with lower gravity (e.g., the Moon, where \\(g \\approx 1.62\\) m/s\u00b2), projectiles travel much farther than on Earth. 3. Practical Applications of Projectile Motion Projectile motion plays a crucial role in various fields: Sports: Optimizing kick angles in soccer, basketball shots, and long jumps. Ballistics: Calculating bullet and missile trajectories. Engineering: Designing structures resistant to impact forces. Space Exploration: Determining launch trajectories for satellites and landers. However, real-world factors complicate the idealized model: - Air resistance reduces the range. - Uneven terrain affects the landing position. - Magnus effect (object spin) alters the trajectory (e.g., in soccer or tennis). 4. Implementation and Visualization with Code To gain a deeper understanding of projectile motion, Python can be used to compute and visualize the relationship between launch angle and range. import numpy as np import matplotlib.pyplot as plt def range_of_projectile(v0, theta, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g # Variable v0 = 20 # \u043c/\u0441 angles = np.linspace(0, 90, 100) ranges = [range_of_projectile(v0, theta) for theta in angles] # Graph plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} \u043c/\u0441') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show() What does the provided script do? \u2705 Computes the range for angles from \\(0^\\circ\\) to \\(90^\\circ\\) . \u2705 Simulates the effect of different initial velocities. \u2705 Plots a graph of range vs. launch angle. If additional factors such as air resistance or variable gravity (e.g., Mars) need to be considered, the code can be extended. Would you like to incorporate such enhancements? \ud83d\ude80","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-projectile-motion-dependence-of-range-on-launch-angle","text":"Projectile motion, the movement of an object thrown at an angle to the horizontal, is a fundamental concept in physics. Understanding how the range of a projectile depends on the launch angle is not only mathematically intriguing but also has numerous real-world applications. This principle is widely used in various fields, from analyzing the flight of a soccer ball to calculating the trajectory of a spacecraft.","title":"Investigating Projectile Motion: Dependence of Range on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"I see you're asking about deriving the equations for projectile motion, specifically the range equation \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) , as shown in the image. Let's go through the derivation step by step using the given equations of motion. We'll assume you're looking to derive the range \\( R \\) , since that's the final equation highlighted, but if you'd like to derive another part (like the time of flight), let me know!","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-1-understand-the-setup","text":"Projectile motion describes an object launched at an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) to the horizontal, under the influence of gravity \\( g \\) (with no air resistance). The motion can be broken into two independent components: - Horizontal motion (x-direction): Constant velocity, since there's no horizontal acceleration. - Vertical motion (y-direction): Accelerated motion due to gravity. The given equations are: - Horizontal position: \\( x = v_0 \\cos \\theta \\cdot t \\) - Vertical position: \\( y = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 \\) - Time of flight: \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) (when \\( y = 0 \\) , i.e., when the projectile returns to the ground) - Range: \\( R = \\frac{v_0^2 \\sin(2\\theta)}{g} \\) Our goal is to derive the range \\( R \\) .","title":"Step 1: Understand the Setup"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-2-derive-the-time-of-flight","text":"First, we need the total time the projectile is in the air (time of flight). The projectile returns to the ground when its vertical position \\( y = 0 \\) . Use the vertical position equation: [ y = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 ] Set \\( y = 0 \\) (when the projectile lands): [ 0 = v_0 \\sin \\theta \\cdot t - \\frac{1}{2} g t^2 ] Factor out \\( t \\) : [ t \\left( v_0 \\sin \\theta - \\frac{1}{2} g t \\right) = 0 ] This gives two solutions: - \\( t = 0 \\) (the launch point) - \\( v_0 \\sin \\theta - \\frac{1}{2} g t = 0 \\) Solve the second equation: [ v_0 \\sin \\theta - \\frac{1}{2} g t = 0 ] [ \\frac{1}{2} g t = v_0 \\sin \\theta ] [ t = \\frac{v_0 \\sin \\theta}{\\frac{1}{2} g} = \\frac{2 v_0 \\sin \\theta}{g} ] This matches the given time of flight: [ t = \\frac{2 v_0 \\sin \\theta}{g} ] This is the total time the projectile is in the air.","title":"Step 2: Derive the Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-3-derive-the-range-r","text":"The range \\( R \\) is the horizontal distance traveled when the projectile lands, i.e., the value of \\( x \\) when \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) . Use the horizontal position equation: [ x = v_0 \\cos \\theta \\cdot t ] Substitute the time of flight \\( t = \\frac{2 v_0 \\sin \\theta}{g} \\) : [ R = x = v_0 \\cos \\theta \\cdot \\left( \\frac{2 v_0 \\sin \\theta}{g} \\right) ] Simplify: [ R = \\frac{v_0 \\cdot 2 v_0 \\sin \\theta \\cos \\theta}{g} = \\frac{2 v_0^2 \\sin \\theta \\cos \\theta}{g} ] Now, use the trigonometric identity \\( \\sin(2\\theta) = 2 \\sin \\theta \\cos \\theta \\) : [ 2 \\sin \\theta \\cos \\theta = \\sin(2\\theta) ] Substitute this into the equation: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This matches the given range equation: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ]","title":"Step 3: Derive the Range \\( R \\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-4-verify-the-result","text":"The derived equation shows that the range depends on: - The square of the initial velocity ( \\( v_0^2 \\) ), - The sine of twice the launch angle ( \\( \\sin(2\\theta) \\) ), - The gravitational acceleration ( \\( g \\) ). This makes physical sense: - A higher initial velocity increases the range (since \\( v_0^2 \\) ). - The \\( \\sin(2\\theta) \\) term indicates that the range is maximized when \\( 2\\theta = 90^\\circ \\) , or \\( \\theta = 45^\\circ \\) , which is a well-known result in projectile motion. - A larger \\( g \\) (e.g., on a planet with stronger gravity) reduces the range.","title":"Step 4: Verify the Result"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#final-answer","text":"The range of the projectile is: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This was derived by: 1. Finding the time of flight by setting the vertical position to zero. 2. Substituting the time of flight into the horizontal position equation. 3. Simplifying using the trigonometric identity \\( 2 \\sin \\theta \\cos \\theta = \\sin(2\\theta) \\) .","title":"Final Answer"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#if-youd-like-to-derive-any-other-part-of-the-projectile-motion-equations-eg-maximum-height-or-need-a-numerical-example-let-me-know","text":"","title":"If you'd like to derive any other part of the projectile motion equations (e.g., maximum height) or need a numerical example, let me know!"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-range-analysis-based-on-launch-angle","text":"Key observations: Maximum range occurs at $ \\theta = 45^\\circ $ (assuming no air resistance). Symmetry of trajectory: The same range is achieved at complementary angles (e.g., \\(30^\\circ\\) and \\(60^\\circ\\) result in the same range). Dependence on velocity: Since \\(R\\propto v_0^2\\) , doubling the initial velocity quadruples the range. Effect of gravity: On planets with lower gravity (e.g., the Moon, where \\(g \\approx 1.62\\) m/s\u00b2), projectiles travel much farther than on Earth.","title":"2. Range Analysis Based on Launch Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications-of-projectile-motion","text":"Projectile motion plays a crucial role in various fields: Sports: Optimizing kick angles in soccer, basketball shots, and long jumps. Ballistics: Calculating bullet and missile trajectories. Engineering: Designing structures resistant to impact forces. Space Exploration: Determining launch trajectories for satellites and landers. However, real-world factors complicate the idealized model: - Air resistance reduces the range. - Uneven terrain affects the landing position. - Magnus effect (object spin) alters the trajectory (e.g., in soccer or tennis).","title":"3. Practical Applications of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-and-visualization-with-code","text":"To gain a deeper understanding of projectile motion, Python can be used to compute and visualize the relationship between launch angle and range. import numpy as np import matplotlib.pyplot as plt def range_of_projectile(v0, theta, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g # Variable v0 = 20 # \u043c/\u0441 angles = np.linspace(0, 90, 100) ranges = [range_of_projectile(v0, theta) for theta in angles] # Graph plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} \u043c/\u0441') plt.xlabel('Launch Angle (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Launch Angle') plt.legend() plt.grid() plt.show()","title":"4. Implementation and Visualization with Code"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#what-does-the-provided-script-do","text":"\u2705 Computes the range for angles from \\(0^\\circ\\) to \\(90^\\circ\\) . \u2705 Simulates the effect of different initial velocities. \u2705 Plots a graph of range vs. launch angle. If additional factors such as air resistance or variable gravity (e.g., Mars) need to be considered, the code can be extended. Would you like to incorporate such enhancements? \ud83d\ude80","title":"What does the provided script do?"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Step-by-Step Solution: Theoretical Foundation Step 1: Understand the Given Differential Equation The differential equation for a forced damped pendulum is provided as: $$ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin \\theta = A \\cos(\\omega t) $$ Where: - \\(\\theta\\) : Angle of the pendulum from the vertical (in radians). - \\(\\frac{d^2\\theta}{dt^2}\\) : Angular acceleration. - \\(\\frac{b}{m}\\frac{d\\theta}{dt}\\) : Damping term, proportional to angular velocity, where \\(b\\) is the damping coefficient and $ m $ is the mass. - \\(\\frac{g}{l}\\sin\\theta\\) : Restoring force due to gravity, where $ g $ is the gravitational acceleration and $ l $ is the length of the pendulum. - \\(A\\cos(\\omega t)\\) : External periodic forcing with amplitude $ A $ and frequency \\(\\omega\\) . This equation is nonlinear due to the $ \\sin \\theta $ term, but the task asks for an approximate solution for small angles. Step 2: Apply the Small-Angle Approximation For small angles ($ \\theta \\ll 1 $), we can approximate: $$ \\sin \\theta \\approx \\theta $$ Substitute this into the differential equation: $$ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{l} \\theta = A \\cos(\\omega t) $$ Define: - \\(\\gamma = \\frac{b}{m}\\) : Damping coefficient. - \\(\\omega_0^2 = \\frac{g}{l}\\) , where \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) is the natural frequency of the undamped pendulum. The equation becomes: $$ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ This is now a linear second-order differential equation with constant coefficients and a harmonic forcing term. Step 3: Solve the Homogeneous Equation First, solve the homogeneous part: $$ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = 0 $$ The characteristic equation is: $$ r^2 + \\gamma r + \\omega_0^2 = 0 $$ Solve for \\(r\\) : $$ r = \\frac{-\\gamma \\pm \\sqrt{\\gamma^2 - 4 \\omega_0^2}}{2} $$ The discriminant is: $$ \\Delta = \\gamma^2 - 4 \\omega_0^2 $$ Assuming weak damping ($ \\gamma < 2 \\omega_0 $, so $ \\Delta < 0 $), the roots are complex: $$ r = -\\frac{\\gamma}{2} \\pm i \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2} $$ Define the damped frequency: $$ \\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2} $$ The homogeneous solution is: $$ \\theta_h(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right) $$ This represents damped oscillations that decay over time. Step 4: Solve the Particular Solution (Forced Response) Now, solve the nonhomogeneous equation: $$ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ Assume a particular solution of the form: $$ \\theta_p(t) = B \\cos(\\omega t) + C \\sin(\\omega t) $$ Compute the derivatives: - \\(\\frac{d\\theta_p}{dt} = -B \\omega \\sin(\\omega t) + C \\omega \\cos(\\omega t)\\) - \\(\\frac{d^2\\theta_p}{dt^2} = -B \\omega^2 \\cos(\\omega t) - C \\omega^2 \\sin(\\omega t)\\) Substitute into the equation: $$ (-B \\omega^2 \\cos(\\omega t) - C \\omega^2 \\sin(\\omega t)) + \\gamma (-B \\omega \\sin(\\omega t) + C \\omega \\cos(\\omega t)) + \\omega_0^2 (B \\cos(\\omega t) + C \\sin(\\omega t)) = A \\cos(\\omega t) $$ Equate coefficients of $ \\cos(\\omega t) $ and $ \\sin(\\omega t) $: - For $ \\cos(\\omega t) $: $$ -B \\omega^2 + \\gamma C \\omega + \\omega_0^2 B = A $$ $$ B (\\omega_0^2 - \\omega^2) + \\gamma C \\omega = A \\quad (1) $$ - For $ \\sin(\\omega t) $: $$ -C \\omega^2 - \\gamma B \\omega + \\omega_0^2 C = 0 $$ $$ C (\\omega_0^2 - \\omega^2) - \\gamma B \\omega = 0 \\quad (2) $$ From (2): $$ C (\\omega_0^2 - \\omega^2) = \\gamma B \\omega $$ $$ C = \\frac{\\gamma B \\omega}{\\omega_0^2 - \\omega^2} $$ Substitute $ C $ into (1): $$ B (\\omega_0^2 - \\omega^2) + \\gamma \\left( \\frac{\\gamma B \\omega}{\\omega_0^2 - \\omega^2} \\right) \\omega = A $$ $$ B \\left( (\\omega_0^2 - \\omega^2) + \\frac{\\gamma^2 \\omega^2}{\\omega_0^2 - \\omega^2} \\right) = A $$ $$ B \\left( \\frac{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}{\\omega_0^2 - \\omega^2} \\right) = A $$ $$ B = \\frac{A (\\omega_0^2 - \\omega^2)}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} $$ Now solve for $ C $: $$ C = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} \\cdot \\frac{A (\\omega_0^2 - \\omega^2)}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} = \\frac{A \\gamma \\omega}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} $$ The particular solution is: $$ \\theta_p(t) = \\frac{A (\\omega_0^2 - \\omega^2)}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} \\cos(\\omega t) + \\frac{A \\gamma \\omega}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} \\sin(\\omega t) $$ Rewrite in amplitude-phase form: $$ \\theta_p(t) = D \\cos(\\omega t - \\phi) $$ Where: $$ D = \\sqrt{B^2 + C^2} = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} $$ $$ \\tan \\phi = \\frac{C}{B} = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} $$ Step 5: General Solution The general solution is the sum of the homogeneous and particular solutions: $$ \\theta(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\cos(\\omega t - \\phi) $$ The first term (homogeneous) decays over time, leaving the steady-state solution (particular) as the dominant behavior. Step 6: Resonance Conditions Resonance occurs when the amplitude $ D $ is maximized: $$ D = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} $$ The denominator is minimized when $ \\omega \\approx \\omega_0 $, i.e., the driving frequency matches the natural frequency. For small damping, this leads to a large amplitude, increasing the system\u2019s energy significantly. Solution Summary Forced Damped Pendulum: Small-Angle Approximation Solution Step 1: Differential Equation The equation is: $$ \\frac{d^2\\theta}{dt^2} + \\frac{b}{m} \\frac{d\\theta}{dt} + \\frac{g}{l} \\sin \\theta = A \\cos(\\omega t) $$ Step 2: Small-Angle Approximation For small angles, \\(\\sin \\theta \\approx \\theta\\) , so: $$ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ where \\(\\gamma = \\frac{b}{m}\\) , \\(\\omega_0^2 = \\frac{g}{l}\\) . Step 3: Homogeneous Solution Characteristic equation: \\(r^2 + \\gamma r + \\omega_0^2 = 0\\) Roots: \\(r = -\\frac{\\gamma}{2} \\pm i \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2}\\) Damped frequency: \\(\\omega_d = \\sqrt{\\omega_0^2 - \\left(\\frac{\\gamma}{2}\\right)^2}\\) Solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right)\\) Step 4: Particular Solution Assume: \\(\\theta_p(t) = B \\cos(\\omega t) + C \\sin(\\omega t)\\) Solve to find: $$ B = \\frac{A (\\omega_0^2 - \\omega^2)}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}, \\quad C = \\frac{A \\gamma \\omega}{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2} $$ Amplitude-phase form: \\(\\theta_p(t) = D \\cos(\\omega t - \\phi)\\) , where: $$ D = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}}, \\quad \\tan \\phi = \\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2} $$ Step 5: General Solution $$ \\theta(t) = e^{-\\frac{\\gamma}{2} t} \\left( C_1 \\cos(\\omega_d t) + C_2 \\sin(\\omega_d t) \\right) + \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + \\gamma^2 \\omega^2}} \\cos(\\omega t - \\phi) $$ Step 6: Resonance Resonance occurs at \\(\\omega \\approx \\omega_0\\) , maximizing the amplitude \\(D\\) . Python Code: Forced Damped Pendulum Simulation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Parameters g = 9.81 # Gravitational acceleration (m/s^2) l = 1.0 # Length of the pendulum (m) b = 0.5 # Damping coefficient (kg/s) m = 1.0 # Mass of the pendulum (kg) A = 1.0 # Amplitude of the driving force omega = 2.0 # Driving frequency (rad/s) # Define the system of first-order ODEs def forced_damped_pendulum(state, t, gamma, omega_0, A, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega_0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Constants gamma = b / m omega_0 = np.sqrt(g / l) # Time array t = np.linspace(0, 20, 1000) # Initial conditions: [theta(0), theta_dot(0)] state0 = [0.1, 0.0] # Solve the ODE solution = odeint(forced_damped_pendulum, state0, t, args=(gamma, omega_0, A, omega)) theta = solution[:, 0] theta_dot = solution[:, 1] # Plotting plt.figure(figsize=(12, 8)) # Plot theta vs time plt.subplot(2, 2, 1) plt.plot(t, theta, label='\u03b8(t)') plt.xlabel('Time (s)') plt.ylabel('Angle \u03b8 (rad)') plt.title('Angle vs Time') plt.grid(True) plt.legend() # Plot theta_dot vs time plt.subplot(2, 2, 2) plt.plot(t, theta_dot, label='d\u03b8/dt(t)', color='orange') plt.xlabel('Time (s)') plt.ylabel('Angular Velocity (rad/s)') plt.title('Angular Velocity vs Time') plt.grid(True) plt.legend() # Phase portrait plt.subplot(2, 2, 3) plt.plot(theta, theta_dot, label='Phase Portrait') plt.xlabel('Angle \u03b8 (rad)') plt.ylabel('Angular Velocity d\u03b8/dt (rad/s)') plt.title('Phase Portrait') plt.grid(True) plt.legend() plt.tight_layout() plt.show() Explanation of the Code - Parameters : The script defines physical parameters like \\(g\\) , \\(l\\) , \\(b\\) , \\(m\\) , \\(A\\) , and \\(\\omega\\) . - ODE System : The nonlinear equation is converted into a system of first-order ODEs: \\(\\frac{d\\theta}{dt} = \\dot{\\theta}\\) , \\(\\frac{d\\dot{\\theta}}{dt} = -\\gamma \\dot{\\theta} - \\omega_0^2 \\sin \\theta + A \\cos(\\omega t)\\) . - Numerical Solution : The odeint function from SciPy uses an adaptive method (similar to Runge-Kutta) to solve the system. - Plots : The script generates three plots: \\(\\theta(t)\\) , \\(\\dot{\\theta}(t)\\) , and a phase portrait ( \\(\\dot{\\theta}\\) vs. \\(\\theta\\) ).","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}